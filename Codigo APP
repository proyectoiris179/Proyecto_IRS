from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)
# Configuración de la base de datos (usando SQLite)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///usuarios.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
# Modelo de Usuario
class Usuario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre_completo = db.Column(db.String(100), nullable=False)
    cedula = db.Column(db.String(20), nullable=False)
    asignatura = db.Column(db.String(50), nullable=False)
    # Relación: Un usuario puede tener varias fotos
    fotos = db.relationship('Foto', backref='usuario', lazy=True)
    def __init__(self, nombre_completo, cedula, asignatura):
        self.nombre_completo = nombre_completo
        self.cedula = cedula
        self.asignatura = asignatura
# Modelo para las Fotos
class Foto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    image_data = db.Column(db.Text, nullable=False)  # Se almacena la imagen en formato data URL o ruta
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    def __init__(self, image_data, usuario_id):
        self.image_data = image_data
        self.usuario_id = usuario_id
# Ruta principal: Registro, eliminación y listado de usuarios
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Agregar usuario
        if 'agregar' in request.form:
            nombre_completo = request.form.get('nombre_completo')
            cedula = request.form.get('cedula')
            asignatura = request.form.get('asignatura')
            nuevo_usuario = Usuario(nombre_completo, cedula, asignatura)
            db.session.add(nuevo_usuario)
            db.session.commit()
            # Redirige a la página para capturar la foto, pasando el id del usuario recién creado
            return redirect(url_for('tomarfotos_usuario', usuario_id=nuevo_usuario.id))
        # Eliminar usuario
        elif 'eliminar' in request.form:
            usuario_id = request.form.get('id')
            usuario = Usuario.query.get(usuario_id)
            if usuario:
                db.session.delete(usuario)
                db.session.commit()
            return redirect(url_for('index'))
    usuarios = Usuario.query.all()
    return render_template('index.html', usuarios=usuarios)
# Ruta para capturar fotos para un usuario específico (para nuevos usuarios o fotos adicionales)
@app.route('/tomarfotos_usuario/<int:usuario_id>', methods=['GET', 'POST'])
def tomarfotos_usuario(usuario_id):
    usuario = Usuario.query.get(usuario_id)
    if not usuario:
        return redirect(url_for('index'))
    if request.method == 'POST':
        image_data = request.form.get('image_data')
        if image_data:
            nueva_foto = Foto(image_data=image_data, usuario_id=usuario_id)
            db.session.add(nueva_foto)
            db.session.commit()
        # Permite capturar múltiples fotos redirigiendo de nuevo a la misma página
        return redirect(url_for('tomarfotos_usuario', usuario_id=usuario_id))
    return render_template('tomarfotos_usuario.html', usuario=usuario)
if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)

